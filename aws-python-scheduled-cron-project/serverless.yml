org: kshitijkumar123
app: aws-python
service: aws-serverless-python-project
frameworkVersion: "3"

# TODO:
# MAKE THE FRONTEND!!!!
# Clean up and restructure code files + add failure catching points -- today
# Add authorization and endpoint restriction -- done
# better way to test via Postman
# Customers make incidents and send emails to users to info they are subscribed to -- issue
#   --- need to push for aws ses prod
#   --- can dev test with manual verified accounts for now
# add basic ticket management
# - watch video for simple use cases
# - just one organization with employees
# insight emails about ticket with quote
# push amplify, api for prod
# additional stuff --
# chatgpt integration??
# queues?
# delete old stacks

custom:
  tableName: "watch-me-users-table-${sls:stage}"
  incidentsTableName: "incidents-table-${sls:stage}"
  region: ${self:provider.region}
  incidentTicketsTableName: "incident-tickets-table3-${sls:stage}"

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  stage: dev

  iam:
    role:
      statements:
        # S3 role: Currently, this allows all access to all s3 buckets
        - Effect: Allow
          Action: "s3:*"
          Resource: "*"
        # DynamoDB role
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - Fn::GetAtt: [IncidentsTable, Arn]
            - Fn::GetAtt: [IncidentsTicketTable, Arn]
            - Fn::Join:
                [
                  "/",
                  [
                    "Fn::GetAtt": [IncidentsTicketTable, Arn],
                    "index",
                    "ReporterIdIndex",
                  ],
                ]
            - Fn::Join:
                [
                  "/",
                  [
                    "Fn::GetAtt": [IncidentsTicketTable, Arn],
                    "index",
                    "DeveloperIdIndex",
                  ],
                ]

        - Effect: Allow
          Action:
            - "ses:SendEmail"
          Resource: "*"
  environment:
    USERS_TABLE: ${self:custom.tableName}
    REGION: ${self:provider.region}
    INCIDENTS_TABLE: "incidents-table-${sls:stage}"
    INCIDENTS_TICKET_TABLE: "{self:provider.incidentTicketsTableName}"

functions:
  quotes:
    handler: handler.get_quotes
    events:
      - http:
          path: quotes
          method: get
          cors: true
  updatePermissions:
    handler: handler.update_acl
    events:
      - http:
          path: updatePermissions
          method: post
          cors: true
          # authorizer:
          #   name: customAuthorizer
  sendEmail:
    handler: handler.send_email
    events:
      - http:
          path: sendEmail
          method: post
          authorizer:
            name: customAuthorizer
          cors: true
      - schedule: cron(0 13 * * ? *)
  preSignUp:
    handler: handler.pre_sign_up
    events:
      - cognitoUserPool:
          pool: amplifyreactapp6a4fef01_userpool_6a4fef01-dev
          trigger: PostConfirmation
          existing: true
          forceDeploy: true

  # Incidents CRUD
  getAllIncidents:
    handler: handler.get_all_incidents
    events:
      - http:
          path: incident/all
          method: get
          authorizer:
            name: customAuthorizer
          cors: true

  getIncidents:
    handler: handler.get_incidents
    events:
      - http:
          path: incident/{id}
          method: get
          authorizer:
            name: customAuthorizer
          cors: true

  getReporterIncidents:
    handler: handler.get_reporter_incidents
    events:
      - http:
          path: incident/reporter/{id}
          method: get
          authorizer:
            name: customAuthorizer
          cors: true

  getDeveloperIncidents:
    handler: handler.get_developer_incidents
    events:
      - http:
          path: incident/developer/{id}
          method: get
          authorizer:
            name: customAuthorizer
          cors: true

  createIncidents:
    handler: handler.create_incidents
    events:
      - http:
          path: incident
          method: post
          authorizer:
            name: customAuthorizer
          cors: true

  getUserData:
    handler: handler.get_user_data
    events:
      - http:
          path: user/{id}
          method: get
          cors: true

  updateUserData:
    handler: handler.update_user_data
    events:
      - http:
          path: user/{id}
          method: patch
          authorizer:
            name: customAuthorizer
          cors: true

  updateIncidents:
    handler: handler.update_incidents
    events:
      - http:
          path: incident/{id}
          method: patch
          authorizer:
            name: customAuthorizer
          cors: true

  deleteIncidents:
    handler: handler.delete_incidents
    events:
      - http:
          path: incident/{id}
          method: delete
          authorizer:
            name: customAuthorizer
          cors: true

  customAuthorizer:
    handler: handler.authorization
resources:
  Resources:
    Unauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        ResponseType: "DEFAULT_4XX"
        RestApiId:
          Ref: "ApiGatewayRestApi"

    # TODO: check if needed
    PostsMessage:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: watch-me-posts-${self:provider.stage}
    PostsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref PostsMessage
        Protocol: email
        Endpoint: kshitijkumar.atom@gmail.com
        DeliveryPolicy:
          healthyRetryPolicy:
            numRetries: 20
            minDelayTarget: 30
            maxDelayTarget: 600
            backoffFunction: exponential
    # S3Assets:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: user-posts-dev-assets
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}

    IncidentsTicketTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.incidentTicketsTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: reporterId
            AttributeType: S
          - AttributeName: developerId
            AttributeType: S
          - AttributeName: incidentId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          # - AttributeName: incidentTags
          #   AttributeType: S
        KeySchema:
          - AttributeName: incidentId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ReporterIdIndex
            KeySchema:
              - AttributeName: reporterId
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
              # - AttributeName: incidentTags
              #   KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
            # ProvisionedThroughput:
            #   ReadCapacityUnits: 1
            #   WriteCapacityUnits: 1
          - IndexName: DeveloperIdIndex
            KeySchema:
              - AttributeName: developerId
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
              # - AttributeName: incidentTags
              #   KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
            # ProvisionedThroughput:
            #   ReadCapacityUnits: 1
            #   WriteCapacityUnits: 1
    IncidentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: incidentId
            AttributeType: S
        KeySchema:
          - AttributeName: incidentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.incidentsTableName}

    # AWS Cognito
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        # email creds. for login
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    # Client for web app access to Cognito
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: False
